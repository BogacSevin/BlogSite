{"remainingRequest":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cihazbir/blogsitesi/src/views/Dunya.vue?vue&type=template&id=4701657b&","dependencies":[{"path":"/Users/cihazbir/blogsitesi/src/views/Dunya.vue","mtime":1654151623421},{"path":"/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}