{"remainingRequest":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cihazbir/blogsitesi/src/views/Teknoloji.vue?vue&type=template&id=63516093&","dependencies":[{"path":"/Users/cihazbir/blogsitesi/src/views/Teknoloji.vue","mtime":1654151599820},{"path":"/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}