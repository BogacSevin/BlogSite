{"remainingRequest":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cihazbir/blogsitesi/src/views/Haberler.vue?vue&type=template&id=08117e1d&","dependencies":[{"path":"/Users/cihazbir/blogsitesi/src/views/Haberler.vue","mtime":1651912072646},{"path":"/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/blogsitesi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}